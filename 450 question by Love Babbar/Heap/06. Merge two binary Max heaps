//Link of the question-https://practice.geeksforgeeks.org/problems/merge-two-binary-max-heap0144/1#

//1st way
vector<int> mergeHeaps(vector<int> &a, vector<int> &b, int n, int m) {
        vector<int> ans;
        int i=0,j=0;
        while(i<n and j<m){
            if(a[i]<b[j]){
                ans.push_back(b[j]);
                j++;
            }
            else{
                ans.push_back(a[i]);
                i++;
            }
        }
        while(i<n){
            ans.push_back(a[i]);
                i++;
        }
        while(j<m){
            ans.push_back(b[j]);
                j++;
        }
        return ans;
}

//2nd Way

class Solution{
    public:
    void heapify(vector<int> &a,int i,int n){
        int left = 2*i+1;
        int right = 2*i+2;
        int largest = i;
        if(left<n && a[left]>a[largest]){
            largest = left;
        }
        if(right<n && a[right]>a[largest]){
            largest = right;
        }
        if(largest != i){
            swap(a[i],a[largest]);
            heapify(a,largest,n);
        }
    }
    vector<int> mergeHeaps(vector<int> &a, vector<int> &b, int n, int m) {
        for(auto i:b){
            a.push_back(i);
        }
        n = n+m;
        for(int i=(n/2)-1;i>=0;i--){
            heapify(a,i,n);
        }
        return a;
    }
};
