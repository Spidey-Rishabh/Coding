//Link of the question-https://practice.geeksforgeeks.org/problems/merge-k-sorted-linked-lists/1#
class Solution{
  public:
    //Function to merge K sorted linked list.
    void splitList(Node* source, Node** frontRef, Node** backRef){
        struct Node* fast;
        struct Node* slow;
        if (source == NULL || source->next == NULL) {
            *frontRef = source;
            *backRef = NULL;
        } else {
            slow = source;
            fast = source->next;
            while (fast != NULL) {
                fast = fast->next;
                if (fast != NULL) {
                    slow = slow->next;
                    fast = fast->next;
                }
            }
            *frontRef = source;
            *backRef = slow->next;
            slow->next = NULL;
        }
    }
    Node* mergeList(struct Node* a, struct Node* b) {
        struct Node* result = NULL;
        if (a == NULL)
            return (b);
        else if (b == NULL)
            return (a);
        if (a->data <= b->data) {
            result = a;
            result->next = mergeList(a->next, b);
        } else {
            result = b;
            result->next = mergeList(a, b->next);
        }
        return (result);
    }
    Node* mergeSort(Node *head) {
        struct Node* a;
        struct Node* b;
        if (head == NULL || head->next == NULL) 
        return head;
        splitList(head, &a, &b);
        a = mergeSort(a);
        b = mergeSort(b);
        return mergeList(a, b);
    }
    
    Node * mergeKLists(Node *arr[], int K){
           // Your code here
        Node *temp;
        for(int i=0;i<K-1;i++){
            temp=arr[i];
            while(temp->next){
                temp=temp->next;
            }
            temp->next=arr[i+1];
        }
        return mergeSort(arr[0]);
    }
};
