//Link of the question-https://practice.geeksforgeeks.org/problems/remove-duplicates-from-an-unsorted-linked-list/1#
#include <bits/stdc++.h>
using namespace std;
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};

void print(Node *root){
  Node *temp = root;
  while(temp!=NULL){
  cout<<temp->data<<" ";
  temp=temp->next;
  }
}
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};
class Solution{
    public:
    //Function to remove duplicates from unsorted linked list.
    Node * removeDuplicates( Node *head) {
        // your code goes here
        map<int,int> m;
        Node *temp=head,*prev=head;
        while(temp){
            if(m[temp->data]==1){
                Node *d=prev->next;
                temp=prev;
                prev->next=prev->next->next;
                free(d);
                
            }
            else    m[temp->data]++;
            prev=temp;
            temp=temp->next;
            
        }
        //cout<<m.size()<<" ";
        return head;
    }
};
int main() {
	// your code goes here
	int T;
	cin>>T;
	while(T--){
		int K;
		cin>>K;
		struct Node *head = NULL;
        struct Node *temp = head;
 		for(int i=0;i<K;i++){
		int data;
		cin>>data;
			if(head==NULL)
			head=temp=new Node(data);
			else{
				temp->next = new Node(data);
				temp=temp->next;
			}
		}
		
	    Solution ob;
		Node *result  = ob.removeDuplicates(head);
		print(result);
		cout<<endl;
	}
	return 0;
}
