//Link of the question-https://practice.geeksforgeeks.org/problems/inversion-of-array-1587115620/1
#include <bits/stdc++.h>
using namespace std;
class Solution{
  public:
    long long merge(long long int arr[],long long int temp[],long long int left,long long int mid,long long int right){
        long long int i,j,k;
        long long int res=0;
        i=left;
        j=mid;
        k=left;
        
        while((i<=mid-1) && (j<=right)){
            if(arr[i]<=arr[j]) temp[k++]=arr[i++];
            else{
                temp[k++]=arr[j++];
                res=res+ (mid-i);
            }
        }
        while(i<=mid-1) temp[k++]=arr[i++];
        while(j<=right) temp[k++]=arr[j++];
        for(i=left;i<=right;i++) arr[i]=temp[i];
        
        return res;
    }
    long long int mergesort(long long arr[],long long temp[],long long int left,long long int right){
       long long int mid,count=0;
       if(right>left){
           mid=(left+right)/2;
           count+=mergesort(arr,temp,left,mid);
           count+=mergesort(arr,temp,mid+1,right);
           count+=merge(arr,temp,left,mid+1,right);
       }
       return count;
    }
    long long int inversionCount(long long arr[], long long array_size){
        // Your Code Here
        long long int temp[array_size];
        return mergesort(arr,temp,0,array_size-1);
    }

};
int main() { 
    long long T;
    cin >> T;
    
    while(T--){
        long long N;
        cin >> N;
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A,N) << endl;
    }
    
    return 0;
}
